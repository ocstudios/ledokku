datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  apps          App[]
  appBuilds     AppBuild[]
  databases     Database[]
  activities    Activity[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model App {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String
  dockerfilePath String?
  type           AppTypes
  appBuild       AppBuild[]
  status         AppStatus      @default(IDLE)
  databases      Database[]
  user           User?          @relation(fields: [userId], references: [id])
  userId         String?
  appMetaGithub  AppMetaGithub?
  tags           Tag[]
}

enum AppTypes {
  DOKKU
  GITHUB
  GITLAB
  DOCKER
}

enum AppStatus {
  RUNNING
  BUILDING
  IDLE
}

model AppMetaGithub {
  id                      String   @id @default(uuid())
  app                     App      @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId                   String   @unique
  repoId                  String
  repoOwner               String
  repoName                String
  branch                  String
  githubAppInstallationId String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model AppBuild {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  status    AppBuildStatus
  app       App            @relation(fields: [appId], references: [id])
  appId     String
  User      User?          @relation(fields: [userId], references: [id])
  userId    String?
}

enum AppBuildStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ERRORED
}

model Database {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  type      DbTypes
  version   String?
  apps      App[]
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Tags      Tag[]
}

enum DbTypes {
  REDIS
  POSTGRESQL
  MONGODB
  MYSQL
  MARIADB
}

model Activity {
  id            String           @id @default(uuid())
  name          String
  description   String?
  refersToModel ModelReferences?
  referenceId   String?
  modifierId    String?
  Modifier      User?            @relation(fields: [modifierId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

enum ModelReferences {
  Database
  App
  AppBuild
}

model Settings {
  id            String   @id @default(uuid())
  allowedEmails String[] @default([])
}

model Tag {
  id        String     @id @default(uuid())
  name      String     @unique
  databases Database[]
  apps      App[]
}
